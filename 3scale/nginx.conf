user nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/stderr main;
    error_log stderr;

    sendfile on;

    keepalive_timeout 65;

    server {
        listen 443 ssl;
        server_name localhost;

        ssl_certificate        /etc/nginx/certs/service-chain.pem;
        ssl_certificate_key    /etc/nginx/certs/service-key.pem;
        ssl_client_certificate /etc/nginx/certs/ca.crt;
        ssl_verify_client      optional;
        auth_basic_user_file   /etc/nginx/.htpasswd;

        # browsers connect with basic auth, managed machines with TLS auth; accept either
        if ($ssl_client_verify = SUCCESS) { set $auth_basic off; }
        if ($ssl_client_verify != SUCCESS) { set $auth_basic "Basic or TLS auth required"; }
        auth_basic $auth_basic;

        # hard-coded x-rh-identity headers, see headers.py
        if ($ssl_client_verify = SUCCESS) {
            # system
            set $x_rh_identity "eyJpZGVudGl0eSI6IHsib3JnX2lkIjogIjQyIiwgImludGVybmFsIjogeyJvcmdfaWQiOiAiNDIiLCAiY3Jvc3NfYWNjZXNzIjogZmFsc2UsICJhdXRoX3RpbWUiOiA5MDB9LCAic3lzdGVtIjogeyJjbiI6ICJjMWFkMGZmNi1lMWYwLTRhZDktYmM2Zi04MmU3ZWUzODNlZTQiLCAiY2VydF90eXBlIjogInN5c3RlbSJ9LCAiYWNjb3VudF9udW1iZXIiOiAiMzciLCAiYXV0aF90eXBlIjogImNlcnQtYXV0aCIsICJ0eXBlIjogIlN5c3RlbSJ9LCAiZW50aXRsZW1lbnRzIjogeyJpbnNpZ2h0cyI6IHsiaXNfdHJpYWwiOiBmYWxzZSwgImlzX2VudGl0bGVkIjogdHJ1ZX0sICJyaGVsIjogeyJpc190cmlhbCI6IGZhbHNlLCAiaXNfZW50aXRsZWQiOiB0cnVlfX19";
        }
        if ($ssl_client_verify != SUCCESS) {
            # user
            set $x_rh_identity "eyJpZGVudGl0eSI6IHsidXNlciI6IHsidXNlcm5hbWUiOiAiam9obmRvZSIsICJsb2NhbGUiOiAibm9uZSIsICJpc19vcmdfYWRtaW4iOiB0cnVlLCAiaXNfYWN0aXZlIjogdHJ1ZSwgImVtYWlsIjogImpvaG5kb2VAd2ViY29uc29sZS50ZXN0IiwgImlzX2ludGVybmFsIjogZmFsc2UsICJmaXJzdF9uYW1lIjogIkpvaG4iLCAibGFzdF9uYW1lIjogIkRvZSIsICJ1c2VyX2lkIjogIjcifSwgImFjY291bnRfbnVtYmVyIjogIjIzIiwgIm9yZ19pZCI6ICI0MiIsICJhdXRoX3R5cGUiOiAiYmFzaWMtYXV0aCIsICJpbnRlcm5hbCI6IHsiY3Jvc3NfYWNjZXNzIjogZmFsc2UsICJhdXRoX3RpbWUiOiAwLCAib3JnX2lkIjogIjQyIn0sICJ0eXBlIjogIlVzZXIifSwgImVudGl0bGVtZW50cyI6IHsiaW5zaWdodHMiOiB7ImlzX3RyaWFsIjogZmFsc2UsICJpc19lbnRpdGxlZCI6IHRydWV9LCAicmhlbCI6IHsiaXNfdHJpYWwiOiBmYWxzZSwgImlzX2VudGl0bGVkIjogdHJ1ZX19fQ==";
        }

        # Prevent websocket access on /api
        location ~ ^/api/.*/cockpit/socket {
            return 418 'websocket cannot be routed via /api';
        }

        location /wss/ {
            # Don't pass on proxy auth
            proxy_set_header Authorization "";

            # HACK: podman < 4 cannot DNS-resolve container names in pod, so use pod name
            # proxy_pass http://webconsoleapp-front-end:8080;
            proxy_pass http://webconsoleapp:8080;
            # Required to proxy the connection to Cockpit
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Required for web sockets to function
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_set_header Upgrade $http_upgrade;
            # consoledot/3scale should really do this:
            # proxy_set_header Connection $http_connection;
            # .. but it doesn't: it always adds this header even for plain HTTP requests
            # https://issues.redhat.com/browse/RHCLOUD-21326
            proxy_set_header Connection "Upgrade";

            # consoledot authentication header
            proxy_set_header x-rh-identity $x_rh_identity;

            # Pass ETag header from Cockpit to clients.
            # See: https://github.com/cockpit-project/cockpit/issues/5239
            gzip off;
        }

        location /api/ {
            # Don't pass on proxy auth
            proxy_set_header Authorization "";

            # HACK: podman < 4 cannot DNS-resolve container names in pod, so use pod name
            # proxy_pass http://webconsoleapp-front-end:8080;
            proxy_pass http://webconsoleapp:8080;

            # consoledot authentication header
            proxy_set_header x-rh-identity $x_rh_identity;
        }

        location / {
            return 418 'no route found in 3scale \r\n';
        }
    }
}
